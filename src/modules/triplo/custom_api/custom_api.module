<?php

function  custom_api_menu(){  

   $items = array();

   $items['type/%/data'] = array (     
        'title' => 'News item list',
        'page callback' => 'custom_node_list',
        'page arguments'  => array(1),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK
   );

   $items['type/%/data/%'] = array (     
        'title' => 'News item list',
        'page callback' => 'custom_node_retrieve',
        'page arguments'  => array(1,3),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK
   ); 

   $items['ckeditor/blocks'] = array(
         'page callback' => 'ckeditor_blocks_blocks_ajax',
         'access arguments' => array('administer blocks'),
  );

  $items['ckeditor/%/%'] = array(
    'page callback' => 'ckeditor_blocks_block_ajax',
    'page arguments' => array(1,2),
    'access arguments' => array('access content'),
  );

  $items['webform/submit'] = array(
    'page callback' => 'webform_submit',
    'page arguments' => array(1,2),
    'access arguments' => array('access content'),
  );

 
   return $items;


}

function webform_submit(){

  
  $data = json_decode(file_get_contents('php://input'), true);
  //echo "";print_r($data); exit;
  
  $id = db_insert('webform_submissions')
  ->fields(array(
    'nid' => 50,
    'submitted' => REQUEST_TIME,
    'completed' => REQUEST_TIME,
    'modified' => REQUEST_TIME,
    'remote_addr' => getUserIpAddr(),
  ))
  ->execute();

  $i=1;
  foreach($data as $key => $val) {
    
    db_insert('webform_submitted_data')
  ->fields(array(
    'nid' => 50,
    'sid' => $id,
    'cid' => $i,
     $key => $val,
  ))
  ->execute();
  $i++;

  }

  return  drupal_set_message(t('The form has been submitted.'));

}

function getUserIpAddr(){
  if(!empty($_SERVER['HTTP_CLIENT_IP'])){
      //ip from share internet
      $ip = $_SERVER['HTTP_CLIENT_IP'];
  }elseif(!empty($_SERVER['HTTP_X_FORWARDED_FOR'])){
      //ip pass from proxy
      $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
  }else{
      $ip = $_SERVER['REMOTE_ADDR'];
  }
  return $ip;
}

function custom_node_list($content_type){

    $query = new EntityFieldQuery();

         $query
      ->entityCondition('entity_type', 'node', '=')
      ->propertyCondition('status', 1, '=')
      ->propertyCondition('type', $content_type, '=');
      $result = $query->execute();

    $nodes = node_load_multiple(array_keys($result['node']));

    foreach($nodes as $node){  

      generate_styled_image($node, 'list');
      $output[] =$node;
    }


   backdrop_json_output($output);
   backdrop_exit();

}

function custom_node_retrieve($content_type,$nid){

    $query = new EntityFieldQuery();


          $query
      ->entityCondition('entity_type', 'node', '=')
      ->propertyCondition('status', 1, '=')
      ->propertyCondition('nid', $nid, '=')    
      ->propertyCondition('type', $content_type, '=');
      $result = $query->execute(); 


     $node = node_load(array_keys($result['node']));

     generate_styled_image($node, 'list');


   backdrop_json_output($node);
   backdrop_exit();

}

/*
* Generate styled image and URL for image fields using image_style
* @param $node - Which node to be used to generate image style
* @param $operation - node list or retrieve? 
*
*/

function generate_styled_image($node, $operation = Null){
   if($node->type == 'team'){
      $style_name = 'big_thumbnail';      
      if(!empty($node->field_profile_picture[und][0][uri])){
         $path = $node->field_profile_picture[und][0][uri]; 
         $style_url = image_style_url($style_name, $path);
         $node->field_profile_picture[und][0][uri] = $style_url;
      }
   }
   else if ($node->type == 'blog'){
         $style_name = 'big_thumbnail';      
         if(!empty($node->field_featured_image[und][0][uri])){
         $path = $node->field_featured_image[und][0][uri]; 
         $style_url = image_style_url($style_name, $path);
         $node->field_featured_image[und][0][uri] = $style_url;
      }
      
         $style_name = 'large';      
         if(!empty($node->field_header_image[und][0][uri])){
             $path = $node->field_header_image[und][0][uri]; 
             $style_url = image_style_url($style_name, $path);
             $node->field_header_image[und][0][uri] = $style_url;

      }
   
   }
   else if ($node->type == 'clients'){
         $style_name = 'big_thumbnail';      
         if(!empty($node->field_client_logo[und][0][uri])){
         $path = $node->field_client_logo[und][0][uri]; 
         $style_url = image_style_url($style_name, $path);
         $node->field_client_logo[und][0][uri] = $style_url;

      }
   }else if ($node->type == 'slider'){
         $style_name = 'large';      
         if(!empty($node->field_slider_image[und][0][uri])){
         $path = $node->field_slider_image[und][0][uri]; 
         $style_url = image_style_url($style_name, $path);
         $node->field_slider_image[und][0][uri] = $style_url;
         $node->field_slider_image[und][0][uri] =str_replace('/styles/large/public','',$node->field_slider_image[und][0][uri]);

      }
   }else if ($node->type == 'services'){
         $style_name = 'big_thumbnail';      
         if(!empty($node->field_service_image[und][0][uri])){
         $path = $node->field_service_image[und][0][uri]; 
         $style_url = image_style_url($style_name, $path);
         $node->field_service_image[und][0][uri] = $style_url;

      }
   }else if ($node->type == 'portfolio'){
         $style_name = 'medium';      
         if(!empty($node->field_portfolio_image[und][0][uri])){
         $path1 = $node->field_portfolio_image[und][0][uri]; 
         $style_url = image_style_url($style_name, $path1);
         $node->field_portfolio_image[und][0][uri] = $style_url;

      }

         $style_name = 'large';      
         if(empty($node->field_header_image[und][0][uri])){
         $style_url = image_style_url($style_name, $path1);
         $node->field_header_image[und][0][uri] = $style_url;

      }
   }

   

}

function ckeditor_blocks_get_block($module, $delta, $check_roles = FALSE) {

  static $blocks = array();
  if(isset($blocks[$module.$delta])) {
    return "";
  }
  $blocks[$module.$delta] = true;

  global $language;
  $block = block_custom_block_load($delta, $language->langcode);

  $views_name = '';
  if($module == 'views'){
    // Get the view name from views block name 
    $views_delta_arr = explode('-',$delta);
    if(!empty($views_delta_arr)){
      $views_name = $views_delta_arr[0];
      $display_id = $views_delta_arr[1];
      if($display_id == 'block'){
        $display_id = 'default';
      }
    }
    $block_content = views_embed_view($views_name, $display_id);
  }else{
    $block_content = module_invoke($module, 'block_view', $delta);
  }

  // @TODO feedback
  $block = (object)$block;
  $block->module = $module;
  $block->plugin = $module.':'.$delta;
  $block->delta = $delta;
  $block->style = "";

  $uuid = new Uuid();
  $block->uuid = $uuid->generate();


  // Allow modules to modify the block before it is viewed, via either
  // hook_block_view_alter() or hook_block_view_MODULE_DELTA_alter().
  $block->subject = (empty($block_content['subject'])) ? '' : $block_content['subject'];
  backdrop_alter(array('block_view', "block_view_{$module}_" . str_replace('-', '_', $delta)), $block_content, $block);
  
  if (isset($block_content['content'])) {
     // Assemble a structured content array.
    $content = (object) array(
      'title' => $block->subject,
      'content' => $block_content['content'],
    );
  $output = theme('block', array('content' => $content, 'block' => $block));
  }
  elseif (isset($block_content)){
    $content = (object) array(
      'title' => $block->subject,
      'content' => $block_content,
    );
    $output = theme('block', array('content' => $content, 'block' => $block));
  }else{
    $output = '';
  }   
  
    return $output;
}

/**
 * Page callback for getting a list of blocks.
 */
function ckeditor_blocks_blocks_ajax() {
  // Disable client-side caching.
  header('Cache-Control: private, no-cache, no-store, must-revalidate, max-age=0');
  header('Pragma: no-cache');
  // Disable server-side caching.
  backdrop_page_is_cacheable(FALSE);

  global $theme_key;
  $options = array();
  $options['All'] = 'Select a block';
  $module_blocks = layout_get_block_info();
  // Allow the block list to be altered.
  $included_modules = array('views','block','node','webform');
  $excluded_deltas = array('content');
  backdrop_alter('ckeditor_blocks_list', $module_blocks);
  foreach ($module_blocks as $module => $blocks) {
    if(in_array($module, $included_modules)){    
      if (!empty($blocks)) {
        foreach ($blocks as $delta => $block) {
          if(!in_array($delta, $excluded_deltas)){
            $options['[block:' . $module. '=' . $delta . ']'] = $block['info'];
          }        
        }
      }
    }
  }

  backdrop_json_output($options);
  backdrop_exit();
}

/**
 * Page callback for rendering a block
 */
function ckeditor_blocks_block_ajax($module, $delta) {  
  // Disable client-side caching.
  header('Cache-Control: private, no-cache, no-store, must-revalidate, max-age=0');
  header('Pragma: no-cache');
  // Disable server-side caching.
  backdrop_page_is_cacheable(FALSE);
  $block = ckeditor_blocks_get_block($module, $delta);
  
  backdrop_json_output(array('html' => ($block ? $block : '(Empty Block)')));
  backdrop_exit();

  backdrop_json_output(array('html' => ($block ? $block : '(Empty Block)')));
}



/**
 * Filter replacement callback.
 *
 * @param type $text
 * @param type $filter
 * @param type $format
 * @return type
 */
function _ckeditor_blocks($text, $filter, $format) {
  if (preg_match_all("/\[block:([^=\\]]+)=?([^\\]]*)?\]/i", $text, $match)) {
    foreach ($match[2] as $key => $value) {
      $raw_tags[] = $match[0][$key];
      $module = $match[1][$key];
      $delta = $match[2][$key];

      $check_roles = !empty($filter->settings['check_roles']);
      $repl[] =  ckeditor_blocks_get_block($module, $delta, $check_roles);
    }
    return str_replace($raw_tags, $repl, $text);
  }
  return $text;
}

?>
